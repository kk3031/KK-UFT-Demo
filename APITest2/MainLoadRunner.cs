/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘APITest2.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using Microsoft.Win32;
    using System;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Shared.Utilities;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Ext.LoadRunnerRTAddin;
    using HP.ST.Fwk.JVMLoader;
    
    
    
    public partial class LRWorkFlowScript : LRWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
        TestEntities _flow = null;
    	LoadRunner.LrApi lr;
    
    	
    	public BindDirection bind_dir11 = null;
        public BindDirection bind_dir12 = null;
        
        public LRWorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test", VuserClass.executionUnitInput)
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	this._context.SnapshotManager.EnableSnapshots = false;
        	this._context.PropertyBag["IsRunningInLodeMode"] = true;
        	_userCode = new TestUserCode();
            _flow = _userCode;
        	LoadInput();
        	this.Activities.Clear();
        	_flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.Sequence12 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence12");
            _flow.StServiceCallActivity8 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity8");
            _flow.IfElse4 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse4Input>(_context,"IfElse4");
            _flow.IfElseBranch5 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch5");
            _flow.IfElseBranch6 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch6");
            _flow.StServiceCallActivity9 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity9");
            _flow.StServiceCallActivity10 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity10");
            _flow.ReportMessageActivity11 = new HP.ST.Ext.BasicActivities.ReportMessageActivity(_context,"ReportMessageActivity11");
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.Loop2.Activities.Add (_flow.Sequence12);
            this.Activities.Add (_flow.Loop2);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            _flow.EndActivity3.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            this.Activities.Add (_flow.EndActivity3);
            _flow.Sequence12.Comment = @"";
            _flow.Sequence12.IconPath = @"";
            _flow.Sequence12.Name = @"Sequence12";
            _flow.Sequence12.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.Sequence12.Activities.Add (_flow.StServiceCallActivity8);
            _flow.Sequence12.Activities.Add (_flow.IfElse4);
            XmlDocument StServiceCallActivity8_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity8_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity8_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrders xmlns=""HP.SOAQ.SampleApp""><FlightsDetails><OrderNumber>3</OrderNumber></FlightsDetails></GetFlightOrders></Body></Envelope>");
            _flow.StServiceCallActivity8.InputEnvelope = StServiceCallActivity8_InputEnvelope_Document;
            _flow.StServiceCallActivity8.Comment = @"";
            _flow.StServiceCallActivity8.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity8.Name = @"GetFlightOrders";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity8.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlightOrders";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity8.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity8.Service = @"Flights_Service";
            _flow.StServiceCallActivity8.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity8.Operation = @"GetFlightOrders";
            _flow.StServiceCallActivity8.IsOneWay = false;
            _flow.StServiceCallActivity8.SendRequestToService=true;
            _flow.StServiceCallActivity8.FaultExpected=false;
            _flow.StServiceCallActivity8.IsAsync=false;
            _flow.StServiceCallActivity8.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity8.ListenOnPort = (int)0;
            _flow.StServiceCallActivity8.StartStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionStart;
            _flow.StServiceCallActivity8.EndStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionEnd;
            _flow.StServiceCallActivity8.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.IfElse4.ConditionAsString = @"{Step.OutputProperties.StServiceCallActivity8.Body.GetFlightOrdersResponse.GetFlightOrdersResult.FlightOrder[1].OrderNumber} Equal 3";
            _flow.IfElse4.Comment = @"";
            _flow.IfElse4.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse4.Name = @"Condition4";
            _flow.IfElse4.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.IfElse4.Activities.Add (_flow.IfElseBranch5);
            _flow.IfElse4.Activities.Add (_flow.IfElseBranch6);
            _flow.IfElseBranch5.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi26 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrdersResponse'][1]/*[local-name(.)='GetFlightOrdersResult'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter16 = new VTDXPathGetter(pi26,XmlTypeCode.Int);
            binding_getter16 = new XPathGetterDecorator(binding_getter16,"{Array0}",1);
            		System.Int32 expr00 = (System.Int32)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.StServiceCallActivity8.GetParam(binding_getter16),typeof(System.Int32));
            		var result0 = expr00;
            		System.Int32 result1 = (System.Int32)(3);
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch5.Comment = @"";
            _flow.IfElseBranch5.IconPath = @"";
            _flow.IfElseBranch5.Name = @"Yes";
            _flow.IfElseBranch5.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.IfElseBranch5.Activities.Add (_flow.StServiceCallActivity9);
            _flow.IfElseBranch5.Activities.Add (_flow.StServiceCallActivity10);
            _flow.IfElseBranch6.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch6.Comment = @"";
            _flow.IfElseBranch6.IconPath = @"";
            _flow.IfElseBranch6.Name = @"No";
            _flow.IfElseBranch6.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            _flow.IfElseBranch6.Activities.Add (_flow.ReportMessageActivity11);
            XmlDocument StServiceCallActivity9_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity9_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity9_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><UpdateFlightOrder xmlns=""HP.SOAQ.SampleApp""><UpdateFlightOrderDetails><Class>Business</Class><OrderNumber>{Step.InputProperties.StServiceCallActivity8.Body.GetFlightOrders.FlightsDetails.OrderNumber}</OrderNumber></UpdateFlightOrderDetails></UpdateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity9.InputEnvelope = StServiceCallActivity9_InputEnvelope_Document;
            _flow.StServiceCallActivity9.Comment = @"";
            _flow.StServiceCallActivity9.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity9.Name = @"UpdateFlightOrder";
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity9.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity9.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/UpdateFlightOrder";
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity9.Service = @"Flights_Service";
            _flow.StServiceCallActivity9.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity9.Operation = @"UpdateFlightOrder";
            _flow.StServiceCallActivity9.IsOneWay = false;
            _flow.StServiceCallActivity9.SendRequestToService=true;
            _flow.StServiceCallActivity9.FaultExpected=false;
            _flow.StServiceCallActivity9.IsAsync=false;
            _flow.StServiceCallActivity9.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity9.ListenOnPort = (int)0;
            _flow.StServiceCallActivity9.StartStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionStart;
            _flow.StServiceCallActivity9.EndStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionEnd;
            _flow.StServiceCallActivity9.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi27 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter17 = new VTDXPathGetter(pi27,XmlTypeCode.Int);
            VTDPropertyInfoBase pi28 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='UpdateFlightOrder'][1]/*[local-name(.)='UpdateFlightOrderDetails'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter11 = new VTDXPathSetter(pi28,XmlTypeCode.Int);
            bind_dir11 = new BindDirection(_flow.StServiceCallActivity8,binding_getter17,binding_setter11,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity9.InDirections.Add(bind_dir11);
            XmlDocument StServiceCallActivity10_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity10_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity10_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrders xmlns=""HP.SOAQ.SampleApp""><FlightsDetails><OrderNumber>{Step.InputProperties.StServiceCallActivity8.Body.GetFlightOrders.FlightsDetails.OrderNumber}</OrderNumber></FlightsDetails></GetFlightOrders></Body></Envelope>");
            _flow.StServiceCallActivity10.InputEnvelope = StServiceCallActivity10_InputEnvelope_Document;
            _flow.StServiceCallActivity10.Comment = @"";
            _flow.StServiceCallActivity10.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity10.Name = @"GetFlightOrders";
            _flow.StServiceCallActivity10.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity10.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity10.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity10.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlightOrders";
            _flow.StServiceCallActivity10.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity10.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity10.Service = @"Flights_Service";
            _flow.StServiceCallActivity10.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity10.Operation = @"GetFlightOrders";
            _flow.StServiceCallActivity10.IsOneWay = false;
            _flow.StServiceCallActivity10.SendRequestToService=true;
            _flow.StServiceCallActivity10.FaultExpected=false;
            _flow.StServiceCallActivity10.IsAsync=false;
            _flow.StServiceCallActivity10.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity10.ListenOnPort = (int)0;
            _flow.StServiceCallActivity10.StartStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionStart;
            _flow.StServiceCallActivity10.EndStepEvent += HP.ST.Ext.WebServicesActivities.TransactionHandlers.TransactionEnd;
            _flow.StServiceCallActivity10.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            VTDPropertyInfoBase pi29 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter18 = new VTDXPathGetter(pi29,XmlTypeCode.Int);
            VTDPropertyInfoBase pi30 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter12 = new VTDXPathSetter(pi30,XmlTypeCode.Int);
            bind_dir12 = new BindDirection(_flow.StServiceCallActivity8,binding_getter18,binding_setter12,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity10.InDirections.Add(bind_dir12);
            _flow.ReportMessageActivity11.Status = @"Fail";
            _flow.ReportMessageActivity11.Message = @"Order # not found";
            _flow.ReportMessageActivity11.Destination = @"ReportAndOutput";
            _flow.ReportMessageActivity11.Comment = @"";
            _flow.ReportMessageActivity11.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_report_message.png";
            _flow.ReportMessageActivity11.Name = @"Report Message11";
            _flow.ReportMessageActivity11.TransactionWastedTime += HP.ST.Fwk.RunTimeFWK.TransactionHandlers.TransactionWastedTime;
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	public LoadRunner.LrApi LrApi
    	{
    		set { this.lr = value; }
    	}
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
            this.ExecuteStep();
            WorkFlowScript_Completed();
        }
        
    
        void Workflow_Executing()
        {	        
        }
        
        void WorkFlowScript_Completed()
        {
          	OnExecutionCompleted();
        }
                    
        void TransactionStart(object sender, EventArgs args)
        {
          	STActivityBase activity = sender as STActivityBase;
          	lr.start_transaction(activity.Name);
        }
            
        void TransactionEnd(object sender, EventArgs args)
        {
           	STActivityBase activity = sender as STActivityBase;
           	lr.end_transaction(activity.Name, lr.PASS);
        }
    
        private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
           	
        }
    
    }
    
    public partial class VuserClass
    {
    	STRunTimeContext ctx;
        LRWorkFlowScript script;
    
        public int Action()
        {
    		
    		try
    		{
    			
                script.LrApi = lr;
                script.InitializeComponent();
                script.Start();
            }
            catch (Exception)
            {
    			// todo: log the error message
            }
            
            return 0;
        }
        
        private void SendLogToVugen(string logText)
    	{
    		lr.log_message(logText);
    	}
    }
    
    }
    